#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2013 Joyent, Inc.  All rights reserved.
# Use is subject to license terms.

set -o xtrace

. /lib/svc/share/smf_include.sh
. /lib/sdc/config.sh

# Make sure working directory is / to prevent unmounting problems.
cd /
PATH=/usr/sbin:/usr/bin; export PATH

wait_and_clear()
{
    while [ true ]; do
        # It seems like jobs -p can miscount if we don't run jobs first
        jobs >/dev/null
        local cnt=`jobs -p | wc -l`
        [ $cnt -eq 0 ] && break
        for s in `svcs -x | nawk '{
            if ($1 ~ /^svc:/) nm=$1
            if ($1 == "State:" && $2 == "maintenance") print nm
        }'`
        do
            svcadm clear $s
        done
        sleep 1
    done
}

create_setup_status()
{
    [[ -e /var/lib/setup.json ]] && rm -f /var/lib/setup.json
    echo "{" \
	"\"node_type\": \"computenode\"," \
	"\"start_time\": \"$(date "+%Y-%m-%dT%H:%M:%SZ")\"," \
	"\"current_state\": \"setup_complete\"," \
	"\"seen_states\": [" \
	"\"zpool_created\"," \
	"\"filesystems_setup\"," \
	"\"agents_installed\"," \
	"\"upgrade_complete\"," \
	"\"setup_complete\"" \
	"]," \
	"\"complete\": true," \
	"\"last_updated\": \"$(date "+%Y-%m-%dT%H:%M:%SZ")\"" \
	"}" >/var/lib/setup.json
    chmod 400 /var/lib/setup.json
}

# This process is execessively complex but if not done carefully we can wedge
# with svcs in maintenance.  We start by removing all but the agents_core.
# Sometimes this leaves one or more agents still installed, so we do it again.
# Finally we remove the agents_core (which should be the only thing left) and
# then clean up the dirs so new agents will install into a fresh environment.
# The wait_and_clear function is used to watch for svcs goint into maintenance
# during this process and clear them so that the agent uninstall can continue.
uninstall_agents6()
{
    echo "Removing the old agents..." > /dev/console

    local AGENTS_DIR=/opt/smartdc/agents

    local agent=
    local TOREMOVE=`/opt/smartdc/agents/bin/agents-npm --no-registry \
        ls installed 2>/dev/null | nawk '{print $1}'`
    for agent in $TOREMOVE
    do
        (echo "$agent" | egrep -s '^atropos@') && continue
        # We have to do agents_core after the others
        (echo "$agent" | egrep -s '^agents_core@') && continue

        # Supress possible npm warning removing CA (See AGENT-392)
        if (echo "$agent" | egrep -s '^cainstsvc'); then
            [ -e $AGENTS_DIR/smf/cainstsvc-default.xml ] && \
                touch $AGENTS_DIR/smf/cainstsvc.xml
        fi

        echo "Uninstall: $agent"
        /opt/smartdc/agents/bin/agents-npm uninstall $agent &
        wait_and_clear
    done

    TOREMOVE=`/opt/smartdc/agents/bin/agents-npm --no-registry ls installed \
        2>/dev/null | nawk '{print $1}'`
    for agent in $TOREMOVE
    do
        (echo "$agent" | egrep -s '^atropos@') && continue
        # We have to do agents_core after the others
        (echo "$agent" | egrep -s '^agents_core@') && continue

        echo "Uninstall: $agent"
        /opt/smartdc/agents/bin/agents-npm uninstall $agent &
        wait_and_clear
    done

    TOREMOVE=`/opt/smartdc/agents/bin/agents-npm --no-registry ls installed \
        2>/dev/null | nawk '{print $1}'`
    for agent in $TOREMOVE
    do
        (echo "$agent" | egrep -s '^atropos@') && continue

        echo "Uninstall: $agent"
        /opt/smartdc/agents/bin/agents-npm uninstall $agent &
        wait_and_clear
    done

    for dir in $(ls "$AGENTS_DIR"); do
        case "$dir" in
        db|smf) continue ;;
        *)      rm -fr $AGENTS_DIR/$dir ;;
        esac
    done

    rm -rf $AGENTS_DIR/smf/*
}

install_agents7()
{
    echo "Installing the new agents..." > /dev/console

    # Note: the preceeding call to install_config has called load_sdc_config

    curl -k -o /var/agents_latest.sh \
        -s $CONFIG_assets_admin_ip:/extra/agents/latest

    [[ ! -f /var/agents_latest.sh ]] && return 1
    (cd /var/tmp; bash /var/agents_latest.sh)
    rm -f /var/agents_latest.sh
    return 0
}

update_root_password()
{

    enc_password=`nawk -F= '{
        if ($1 == "root_shadow")
                print substr($2, 2, length($2) - 2)
    }' /opt/smartdc/config/node.config`

    [[ -z "$enc_password" ]] && return 0

    sed -e "s|^root:[^\:]*:|root:${enc_password}:|" /etc/shadow \
      >/etc/shadow.new \
      && chmod 400 /etc/shadow.new \
      && mv /etc/shadow.new /etc/shadow
}

# Loads config file for the node. These are the config values from the headnode
# plus authorized keys and anything else we want.
# This function is only invoked on a compute node.
install_config()
{
    # On standalone machines we don't do this update
    [[ -n $(/usr/bin/bootparams | grep "^standalone=true") ]] && return 0

    load_sdc_config

    curl -k -o /tmp/node.config --silent \
	$CONFIG_assets_admin_ip:/extra/joysetup/node.config

    [[ ! -f /tmp/node.config ]] && return 0
    grep datacenter_name /tmp/node.config >/dev/null 2>&1
    if [ $? != 0 ]; then
	# There is no valid config file served by the assets zone
	rm -f /tmp/node.config
	return 0
    fi

    # Install the file if the local copy is different
    diff /tmp/node.config /opt/smartdc/config/node.config >/dev/null 2>&1
    if [ $? != 0 ]; then
	printf "Updating config file\n" >/dev/console
	mkdir -p /opt/smartdc/config
	mv /tmp/node.config /opt/smartdc/config
        update_root_password
    else
	rm -f /tmp/node.config
    fi
}

# If the CN has a local USB key, make sure its setup for universal booting
update_local_key()
{
    local key=`diskinfo -H | nawk -F\t '{
        if ($1 == "USB" && $6 == "yes" && $7 == "no") print $2}'`
    local nkeys=`echo $key | wc -w`
    [ $nkeys -ne 1 ] && return

    curl -k -o /var/cnkey.tgz -f -s \
        $CONFIG_assets_admin_ip:/extra/usbkey/cnkey.tgz
    [ ! -f /var/cnkey.tgz ] && return

    local console=$(bootparams | grep ^console= | cut -d= -f2)
    [ -z "$console" ] && console=text

    local kmnt=/mnt/usbkey
    mkdir -p $kmnt
    mount -F pcfs -o noatime /dev/dsk/${key}p0:1 $kmnt
    if [[ $? == 0 ]]; then
        if [[ -d $kmnt/dos && -f $kmnt/boot/grub/menu.lst &&
            -f $kmnt/boot/ipxe.lkrn ]]; then
            # already setup

            # Ensure grub timeout is 5 secs for CNs and console is correct
            sed -e "s/^variable os_console.*/variable os_console ${console}/" \
                -e "s/^timeout.*/timeout 5/" \
                < $kmnt/boot/grub/menu.lst > $kmnt/boot/grub/menu.lst.$$
            mv -f $kmnt/boot/grub/menu.lst.$$ $kmnt/boot/grub/menu.lst

            umount $kmnt
            rm -f /var/cnkey.tgz
            return
        fi
        # cleanup in preparation for new image
        rm -rf $kmnt/* $kmnt/.[a-zA_Z]
    else
        # Key in an unknown state, clear it and set it up

        # First clear label since fdisk -g fails on a labeled disk
        dd if=/dev/zero of=/dev/rdsk/${key}p0 count=2

        nsect=`fdisk -g /dev/rdsk/${key}p0 | nawk '{
            if ($1 == "*") next; print $1 * $5 * $6 }'`
        printf "12 128 0 0 0 0 0 0 4096 %d\n" $nsect >/tmp/fdisk.in
        fdisk -F /tmp/fdisk.in /dev/rdsk/${key}p0

        # Need temp copy of files for grub stage1
        mkdir /var/key$$
        (cd /var/key$$; gzcat /var/cnkey.tgz | tar xf -)

        echo "y" | mkfs -F pcfs \
            -o B=/var/key$$/boot/grub/stage1,fat=32 /dev/rdsk/${key}p0:c
        mount -F pcfs -o noatime /dev/dsk/${key}p0:c $kmnt
        if [[ $? != 0 ]]; then
            rm -f /var/cnkey.tgz
            rm -rf /var/key$$
            return
        fi
        rm -rf /var/key$$
    fi

    # install new files
    (cd $kmnt; gzcat /var/cnkey.tgz | tar xf -)
    rm -f /var/cnkey.tgz

    # setup CN boot menu
    cat <<-MENU_DONE >$kmnt/boot/grub/menu.lst
	default 0
	timeout 5
	min_mem64 1024
	serial --speed=115200 --unit=1 --word=8 --parity=no --stop=1
	terminal composite
	variable os_console $console

	title Compute Node (PXE)
	kernel /boot/ipxe.lkrn

	title Legacy Firmware Upgrade Mode
	kernel$ /boot/memdisk console=\${os_console}
	module /boot/freedos.img raw
	MENU_DONE

    umount $kmnt

    # Always install stage1.5 since we don't know if key was bootable
    printf "(hd0) %s\n" /dev/dsk/${key}p0 >/tmp/grub.map
    printf "root (hd0,0)\nsetup (hd0)\n" | \
        TERM=xterm grub --device-map=/tmp/grub.map
}

case "$1" in
'start')

    USBMOUNT=

    # If we're not importing the pools, we shouldn't try to setup as a headnode
    # (since there'll be no zpool)
    if /bin/bootparams | grep "^noimport=true" > /dev/null 2>&1; then
        exit $SMF_EXIT_OK
    fi

    # If we're a headnode, we'll not have AMQP args on the cmdline, and we want
    # to run an initial_script first anyway.
    if /bin/bootparams | grep "^headnode=true" > /dev/null 2>&1; then
        USBMOUNT=/mnt/`svcprop -p joyentfs/usb_mountpoint svc:/system/filesystem/smartdc:default`

	# No config file (e.g. user quit during interactive configuration), so
	# treat as if "noimport=true".
	[[ ! -f $USBMOUNT/config ]] && exit $SMF_EXIT_OK

        initial_script=${USBMOUNT}/$(grep "^initial_script=" $USBMOUNT/config.inc/generic 2>/dev/null | cut -d'=' -f2-)
        if [ -n ${initial_script} ] && [ -e ${initial_script} ]; then
            # Execute the script
            ${initial_script}
            result=$?
            if [ ${result} -eq 2 ]; then
                # we're rebooting, no need to start ur
                echo "REBOOTING!" >> /dev/console
                enable_ur="false"
            elif [ ${result} -ne 0 ]; then
                echo "WARNING: initial_script failed with exit code [${result}]."
                exit $SMF_EXIT_ERR_FATAL
            fi
        fi
    else
	install_config

        # If this CN was running 6.5.x and has now been booted onto 7.0, we
        # need to uninstall the old 6.5.x agents and install the new 7.0 agents.
        if [[ -d /opt/smartdc/agents/modules && \
            ! -d  /opt/smartdc/agents/lib ]]; then

            # Enable new ZFS features. The pool will no longer be usable on 6.5
            zpool set feature@async_destroy=enabled zones
            zpool set feature@empty_bpobj=enabled zones
            zpool set feature@lz4_compress=enabled zones
            zpool set feature@filesystem_limits=enabled zones

            # Convert to 7.0-style cores datasets
            zfs destroy -r zones/cores
            zfs create -o compression=lz4 -o mountpoint=none zones/cores
            for i in `zoneadm list -c`
            do
                zfs destroy -rf zones/$i/cores
                zfs create -o quota=100g -o mountpoint=/zones/$i/cores \
                    zones/cores/$i
            done

            echo "Upgrading the system's agents" > /dev/console

	    # disable the smartdc agent svcs
	    echo "stopping svcs"
	    for i in `svcs -a | nawk '/smartdc\/agent/{print $3}'`
	    do
		[[ "$i" == "svc:/smartdc/agent/ur:default" || \
		   "$i" == "svc:/smartdc/agent/metadata:default" ]] && \
		    continue
		svcadm disable $i
	    done

            uninstall_agents6
            install_agents7

            create_setup_status
            sysinfo -u
            rm -f /tmp/.ur-startup
            svcadm restart ur

            update_local_key

            echo "Upgrade done" > /dev/console
        fi
    fi

    if /bin/bootparams | grep "^headnode=true" > /dev/null 2>&1; then
        /usr/sbin/umount $USBMOUNT
    fi

    ;;

'stop')
    ;;

*)
    echo "Usage: $0 { start | stop }"
    exit $SMF_EXIT_ERR_FATAL
    ;;
esac
exit $SMF_EXIT_OK
