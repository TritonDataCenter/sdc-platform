#!/usr/bin/bash
#
# Copyright (c) 2012, Joyent Inc. All rights reserved.
#

unset LD_LIBRARY_PATH
PATH=/usr/bin:/usr/sbin:/opt/smartdc/bin
export PATH

fatal()
{
	printf "Error: %s\n" "$1"
	exit 1
}

update_compute_nodes()
{
	echo "Updating smartlogin configuration on all compute nodes"
	sdc-oneachnode -c -g /opt/smartdc/agents/etc/smartlogin.cfg \
	    -d /opt/smartdc/agents/etc

	echo "Restarting smartlogin svc on all compute nodes"
	sdc-oneachnode -c svcadm restart smartlogin
}

promptpw()
{
	while [ /usr/bin/true ]; do
		pw=""
		while [ -z "$pw" ]; do
			printf "password: "
			stty -echo
			read pw
			stty echo
			echo
			if [ -n "$pw" ]; then
				if [ ${#pw} -lt 6 ]; then
					echo "The password must be at least" \
					    "6 characters long."
					pw=""
				else
	 				break
				fi
			else 
				echo "A value must be provided."
			fi
		done

		cpw=""
		while [ -z "$cpw" ]; do
			printf "%s: " "confirm password"
			stty -echo
			read cpw
			stty echo
			echo
			[ -n "$cpw" ] && break
			echo "A value must be provided."
		done

		[ "$pw" == "$cpw" ] && break

		echo "The entries do not match, please re-enter."
	done
}

#
# Main body
#

# we only run on the headnode
[[ `sysinfo | json '["Boot Parameters"].headnode'` != "true" ]] && \
    fatal "$myname must be run on the headnode"

promptpw

# core zones
CNAPI=`vmadm lookup tags.smartdc_role=cnapi`
DHCPD=`vmadm lookup tags.smartdc_role=dhcpd`
NAPI=`vmadm lookup tags.smartdc_role=napi`
VMAPI=`vmadm lookup tags.smartdc_role=vmapi`
WORKFLOW=`vmadm lookup tags.smartdc_role=workflow`

# extra zones
USAGEAPI=`vmadm lookup tags.smartdc_role=usageapi`
DCAPI=`vmadm lookup tags.smartdc_role=dcapi`
ADMINUI=`vmadm lookup tags.smartdc_role=adminui`
CLOUDAPI=`vmadm lookup tags.smartdc_role=cloudapi`

echo "Updating cnapi configuration"
json -e "self=this; \
    Object.keys(self).forEach(function (k) { \
        if(self[k].password) self[k].password = '$pw' \
});" < /zones/$CNAPI/root/opt/smartdc/cnapi/config/config.json \
     > /zones/$CNAPI/root/opt/smartdc/cnapi/config/config.json.new
[ $? != 0 ] && fatal "updating cnapi configuration"

nawk -F= -v p=$pw '{
    if ($1 == "CNAPI_HTTP_ADMIN_PW")
        printf("CNAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
    else if ($1 == "WFAPI_HTTP_ADMIN_PW")
        printf("WFAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
    else if ($1 == "NAPI_HTTP_ADMIN_PW")
        printf("NAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
    else
        print $0
}' /zones/$CNAPI/root/opt/smartdc/etc/zoneconfig \
 > /zones/$CNAPI/root/opt/smartdc/etc/zoneconfig.new
[ $? != 0 ] && fatal "updating cnapi configuration"

echo "Updating dhcpd configuration"
json -e "self=this; \
    Object.keys(self).forEach(function (k) { \
        if(self[k].password) self[k].password = '$pw' \
});" < /zones/$DHCPD/root/opt/smartdc/booter/config.json \
     > /zones/$DHCPD/root/opt/smartdc/booter/config.json.new
[ $? != 0 ] && fatal "updating dhcpd configuration"

nawk -F= -v p=$pw '{
    if ($1 == "NAPI_PW")
        printf("NAPI_PW=\047%s\047\n", p)
    else if ($1 == "CNAPI_PW")
        printf("CNAPI_PW=\047%s\047\n", p)
    else
        print $0
}' /zones/$DHCPD/root/opt/smartdc/etc/zoneconfig \
 > /zones/$DHCPD/root/opt/smartdc/etc/zoneconfig.new
[ $? != 0 ] && fatal "updating dhcpd configuration"

echo "Updating napi configuration"
json -e "password='$pw'" \
    < /zones/$NAPI/root/opt/smartdc/napi/config.json \
    > /zones/$NAPI/root/opt/smartdc/napi/config.json.new
[ $? != 0 ] && fatal "updating napi configuration"

nawk -F= -v p=$pw '{
    if ($1 == "ADMIN_PW")
        printf("ADMIN_PW=\047%s\047\n", p)
    else
        print $0
}' /zones/$NAPI/root/opt/smartdc/etc/zoneconfig \
 > /zones/$NAPI/root/opt/smartdc/etc/zoneconfig.new
[ $? != 0 ] && fatal "updating napi configuration"

echo "Updating vmapi configuration"
json -e "napi.password='$pw'" \
    < /zones/$VMAPI/root/opt/smartdc/vmapi/config.json \
    > /zones/$VMAPI/root/opt/smartdc/vmapi/config.json.new
[ $? != 0 ] && fatal "updating vmapi configuration"

nawk -F= -v p=$pw '{
    if ($1 == "NAPI_HTTP_ADMIN_PW")
        printf("NAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
    else
        print $0
}' /zones/$VMAPI/root/opt/smartdc/etc/zoneconfig \
 > /zones/$VMAPI/root/opt/smartdc/etc/zoneconfig.new
[ $? != 0 ] && fatal "updating vmapi configuration"

echo "Updating workflow configuration"
json -e "api.password='$pw'; runner.sandbox.napiPassword='$pw'" \
    < /zones/$WORKFLOW/root/opt/smartdc/workflow/etc/config.json \
    > /zones/$WORKFLOW/root/opt/smartdc/workflow/etc/config.json.new
[ $? != 0 ] && fatal "updating workflow configuration"

nawk -F= -v p=$pw '{
    if ($1 == "HTTP_ADMIN_PW")
        printf("HTTP_ADMIN_PW=\047%s\047\n", p)
    else if ($1 == "NAPI_HTTP_ADMIN_PW")
        printf("NAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
    else
        print $0
}' /zones/$WORKFLOW/root/opt/smartdc/etc/zoneconfig \
 > /zones/$WORKFLOW/root/opt/smartdc/etc/zoneconfig.new
[ $? != 0 ] && fatal "updating workflow configuration"

if [ -n "$USAGEAPI" ]; then
    echo "Updating usageapi configuration"
    json -e "password='$pw'" \
        < /zones/$USAGEAPI/root/opt/smartdc/usageapi/config/config.json \
        > /zones/$USAGEAPI/root/opt/smartdc/usageapi/config/config.json.new
    [ $? != 0 ] && fatal "updating usageapi configuration"

    nawk -F= -v p=$pw '{
        if ($1 == "HTTP_ADMIN_PW")
            printf("HTTP_ADMIN_PW=\047%s\047\n", p)
        else
            print $0
    }' /zones/$USAGEAPI/root/opt/smartdc/etc/zoneconfig \
     > /zones/$USAGEAPI/root/opt/smartdc/etc/zoneconfig.new
    [ $? != 0 ] && fatal "updating usageapi configuration"
fi

if [ -n "$DCAPI" ]; then
    echo "Updating dcapi configuration"
    nawk -F= -v p=$pw '{
        if ($1 == "DCAPI_HTTP_ADMIN_PW")
            printf("DCAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "CNAPI_HTTP_ADMIN_PW")
            printf("CNAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "WFAPI_HTTP_ADMIN_PW")
            printf("WFAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "VMAPI_HTTP_ADMIN_PW")
            printf("VMAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "DAPI_HTTP_ADMIN_PW")
            printf("DAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "NAPI_HTTP_ADMIN_PW")
            printf("NAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else
            print $0
    }' /zones/$DCAPI/root/opt/smartdc/etc/zoneconfig \
     > /zones/$DCAPI/root/opt/smartdc/etc/zoneconfig.new
    [ $? != 0 ] && fatal "updating dcapi configuration"
fi

if [ -n "$ADMINUI" ]; then
    echo "Updating adminui configuration"
    nawk -F= -v p=$pw '{
        if ($1 == "CNAPI_HTTP_ADMIN_PW")
            printf("CNAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "VMAPI_HTTP_ADMIN_PW")
            printf("VMAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "WFAPI_HTTP_ADMIN_PW")
            printf("WFAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "DAPI_HTTP_ADMIN_PW")
            printf("DAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "NAPI_HTTP_ADMIN_PW")
            printf("NAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else
            print $0
    }' /zones/$ADMINUI/root/opt/smartdc/etc/zoneconfig \
     > /zones/$ADMINUI/root/opt/smartdc/etc/zoneconfig.new
    [ $? != 0 ] && fatal "updating adminui configuration"
fi

if [ -n "$CLOUDAPI" ]; then
    echo "Updating cloudapi configuration"
    json -e "vmapi.password='$pw'; napi.password='$pw'" \
        < /zones/$CLOUDAPI/root/opt/smartdc/cloudapi/etc/cloudapi.cfg \
        > /zones/$CLOUDAPI/root/opt/smartdc/cloudapi/etc/cloudapi.cfg.new
    [ $? != 0 ] && fatal "updating cloudapi configuration"

    nawk -F= -v p=$pw '{
        if ($1 == "CNAPI_HTTP_ADMIN_PW")
            printf("CNAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "VMAPI_HTTP_ADMIN_PW")
            printf("VMAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "DAPI_HTTP_ADMIN_PW")
            printf("DAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else if ($1 == "NAPI_HTTP_ADMIN_PW")
            printf("NAPI_HTTP_ADMIN_PW=\047%s\047\n", p)
        else
            print $0
    }' /zones/$CLOUDAPI/root/opt/smartdc/etc/zoneconfig \
     > /zones/$CLOUDAPI/root/opt/smartdc/etc/zoneconfig.new
    [ $? != 0 ] && fatal "updating cloudapi configuration"
fi

# In GZ
if [ -e /opt/smartdc/agents/etc/smartlogin.cfg ]; then
	echo "Updating smartlogin configuration"
	nawk -F= -v p=$pw '{
		if ($1 == "capi-pw")
			printf("capi-pw=%s\n", p)
		else
			print $0
	}' /opt/smartdc/agents/etc/smartlogin.cfg \
	 > /opt/smartdc/agents/etc/smartlogin.cfg.new
	[ $? != 0 ] && fatal "updating smartlogin configuration"
fi

echo "Updating USB configuration file"
nawk -F= -v p=$pw '{
	if ($1 == "capi_http_admin_pw")
		printf("capi_http_admin_pw=%s\n", p)
	else if ($1 == "cnapi_http_admin_pw")
		printf("cnapi_http_admin_pw=%s\n", p)
	else if ($1 == "dapi_http_admin_pw")
		printf("dapi_http_admin_pw=%s\n", p)
	else if ($1 == "dcapi_http_admin_pw")
		printf("dcapi_http_admin_pw=%s\n", p)
	else if ($1 == "napi_http_admin_pw")
		printf("napi_http_admin_pw=%s\n", p)
	else if ($1 == "usageapi_http_admin_pw")
		printf("usageapi_http_admin_pw=%s\n", p)
	else if ($1 == "vmapi_http_admin_pw")
		printf("vmapi_http_admin_pw=%s\n", p)
	else if ($1 == "workflow_http_admin_pw")
		printf("workflow_http_admin_pw=%s\n", p)
	else
		print $0
}' /usbkey/config > /usbkey/config.new
[ $? != 0 ] && fatal "updating USB key configuration"

#
# Put updated files in place
#

# check if usb key already mounted
mounted=`mount -p | nawk '{if ($3 == "/mnt/usbkey") print $3}'`
[ -z "$mounted" ] && \
    (/usbkey/scripts/mount-usb.sh || fatal "unable to mount USB key")

cp /usbkey/config.new /mnt/usbkey/config || \
	fatal "unable to copy config file to USB key"

# We're committed now, no more failing on error

mv /usbkey/config.new /usbkey/config

# unmount key only if we mounted it
[ -z "$mounted" ] && umount /mnt/usbkey

#
# We update/restart in dependency order, core zones first,
# then usageapi dcapi adminui cloudapi
#

mv /zones/$CNAPI/root/opt/smartdc/cnapi/config/config.json.new \
   /zones/$CNAPI/root/opt/smartdc/cnapi/config/config.json
mv /zones/$CNAPI/root/opt/smartdc/etc/zoneconfig.new \
   /zones/$CNAPI/root/opt/smartdc/etc/zoneconfig
echo "Restarting cnapi svcs"
zlogin $CNAPI svcadm restart cnapi

mv /zones/$DHCPD/root/opt/smartdc/booter/config.json.new \
   /zones/$DHCPD/root/opt/smartdc/booter/config.json
mv /zones/$DHCPD/root/opt/smartdc/etc/zoneconfig.new \
   /zones/$DHCPD/root/opt/smartdc/etc/zoneconfig
echo "Restarting dhcpd svcs"
zlogin $DHCPD svcadm restart dhcpd

mv /zones/$NAPI/root/opt/smartdc/napi/config.json.new  \
   /zones/$NAPI/root/opt/smartdc/napi/config.json
mv /zones/$NAPI/root/opt/smartdc/etc/zoneconfig.new \
   /zones/$NAPI/root/opt/smartdc/etc/zoneconfig
echo "Restarting napi svcs"
zlogin $NAPI svcadm restart napi

mv /zones/$VMAPI/root/opt/smartdc/vmapi/config.json.new  \
   /zones/$VMAPI/root/opt/smartdc/vmapi/config.json
mv /zones/$VMAPI/root/opt/smartdc/etc/zoneconfig.new \
   /zones/$VMAPI/root/opt/smartdc/etc/zoneconfig
echo "Restarting vmapi svcs"
zlogin $VMAPI svcadm restart vmapi

mv /zones/$WORKFLOW/root/opt/smartdc/workflow/etc/config.json.new  \
   /zones/$WORKFLOW/root/opt/smartdc/workflow/etc/config.json
mv /zones/$WORKFLOW/root/opt/smartdc/etc/zoneconfig.new \
   /zones/$WORKFLOW/root/opt/smartdc/etc/zoneconfig
echo "Restarting workflow svcs"
zlogin $WORKFLOW svcadm restart wf-runner wf-api

if [ -n "$USAGEAPI" ]; then
    mv /zones/$USAGEAPI/root/opt/smartdc/usageapi/config/config.json.new  \
       /zones/$USAGEAPI/root/opt/smartdc/usageapi/config/config.json
    mv /zones/$USAGEAPI/root/opt/smartdc/etc/zoneconfig.new \
       /zones/$USAGEAPI/root/opt/smartdc/etc/zoneconfig
    echo "Restarting usageapi svcs"
    zlogin $USAGEAPI svcadm restart usageapi-migrate usageapi-consumer \
        usageapi-queue usageapi-http
fi

if [ -n "$DCAPI" ]; then
    mv /zones/$DCAPI/root/opt/smartdc/etc/zoneconfig.new \
       /zones/$DCAPI/root/opt/smartdc/etc/zoneconfig
    echo "Restarting dcapi svcs"
    zlogin $DCAPI svcadm restart dcapi
fi

if [ -n "$ADMINUI" ]; then
    mv /zones/$ADMINUI/root/opt/smartdc/etc/zoneconfig.new \
       /zones/$ADMINUI/root/opt/smartdc/etc/zoneconfig
    echo "Restarting adminui svcs"
    zlogin $ADMINUI svcadm restart adminui
fi

if [ -n "$CLOUDAPI" ]; then
    mv /zones/$CLOUDAPI/root/opt/smartdc/cloudapi/etc/cloudapi.cfg.new \
       /zones/$CLOUDAPI/root/opt/smartdc/cloudapi/etc/cloudapi.cfg
    mv /zones/$CLOUDAPI/root/opt/smartdc/etc/zoneconfig.new \
       /zones/$CLOUDAPI/root/opt/smartdc/etc/zoneconfig
    echo "Restarting cloudapi svcs"
    zlogin $CLOUDAPI svcadm restart cloudapi
fi

if [ -e /opt/smartdc/agents/etc/smartlogin.cfg ]; then
    mv /opt/smartdc/agents/etc/smartlogin.cfg.new \
       /opt/smartdc/agents/etc/smartlogin.cfg
fi

# In GZ
svcadm restart cainstsvc
# In GZ
echo "Restarting smartlogin svcs"
svcadm restart smartlogin

if [ -e /opt/smartdc/agents/etc/smartlogin.cfg ]; then
	# Update smartlogin on all compute nodes
	update_compute_nodes
fi

echo "done"
exit 0
